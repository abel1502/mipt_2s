/*
	Solves square equations
*/

def writeInt4(int4:val);
def writeDbl(dbl:val);
def dbl:readDbl();

import int4:callback(int4:i);

export solveSquare(dbl:a, dbl:b, dbl:c) {
	var dbl:epsilon = 1e-8;
	
	writeInt4(callback(665));
	
	if _abs_dbl(a) < epsilon {
		solveLinear(b, c);
		ret;
	}
	
	var dbl:det;  // Intentionally left uninitialized to demonstrate this is possible
	
	/*_meow(*/int4:(det = b * b - 4. * a * c + 0x0.0)/*)*/;  // Again, just randomly demonstrating language's abilities
	
	if (det < -epsilon) {
		int4:writeInt4(0) + 1;  // More shameless bragging
		ret;
	}
	
	var dbl:sqrt_det = _sqrt(det);
	var dbl:root1;
	var dbl:root2 = (root1 = (-b - sqrt_det) / 2.) + sqrt_det;
	
	if (_abs_dbl(det) < epsilon) {
		writeInt4(1);
		writeDbl(root1);
	} else {
		writeInt4(2);
		writeDbl(root1);
		writeDbl(root2);
	}
}


static solveLinear(dbl:b, dbl:c) {
	var dbl:epsilon = 1e-8;
	
	if _abs_dbl(b) < epsilon {
		if _abs_dbl(c) < epsilon {
			writeDbl(1. / .0);
		} else {
			writeInt4(0);
		}
	} else {
		writeInt4(1);
		
		writeDbl(-c / b);
	}
}


def main() {
	// Doesn't work, becuase arguments are calculated in reverse order
	/*solveSquare(
		readDbl(), 
		readDbl(), 
		readDbl()
	);*/
	
	var dbl:a = readDbl();
	var dbl:b = readDbl();
	var dbl:c = readDbl();
	
	solveSquare(a, b, c);
}
